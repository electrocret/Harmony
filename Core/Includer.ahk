#include *i %A_ScriptDir%\Generated\Includer_includes.ahk
Class module_includer extends module_base{
	static module_version:= 1.0
	static module_about:="Includer handles the addition of Action/Variable/Trigger Scripts to the Core Script.`nCreated by Electrocret"
	static module_UpdateURL:="https://github.com/electrocret/Harmony/blob/master/Core/Includer.ahk"
	static Default_Include_Types:="action,variable,trigger"
	static include_dependency:=""
	static module_initialize_level:=1
	static module_datastore_default:="file"
	#include *i %A_ScriptDir%\Generated\Extension_includer.ahk
	module_preinit(){
		this.config_add("Include_Types","",this.Default_Include_Types)
		if(this.datastore_get("newincludes") == "")
		{
			FileDelete, %A_ScriptDir%\generated\ *.ahk
			this.regenerateincludesfile()
			this.config_set("newincludes","",Array())
			module_manager.Core_Config_SaveAll()
			module_manager.Core_configmode("reload")
			return
		}
	}
	module_init()	{
		this.datastore_Set("Category","module","Core")
		;Calls all new includes
		newincludes:=this.datastore_get("newincludes")
		module_manager.initialized:=0
		Loop % newincludes.MaxIndex()
		{
			this.include_dependency:=this.parseInclude(newincludes[A_Index])
			module_dependency.beginDependentBuild("module_includer",this.include_dependency["include"])
			funcinclude:="Include_" this.include_dependency["include_type"] "_" this.include_dependency["include_file"] ;Checks for Include function that is Include Type Specific with Name
			if(isfunc(funcinclude))
			{
				this.module_func_exec(funcinclude)
				if(newincludes.contains(this.include_dependency["include"]))
					newincludes.removeAt(newincludes.indexof(this.include_dependency["include"]))
			}
			funcinclude:="Include_" this.include_dependency["include_file"] ;Checks for Include function based on Name
			if(isfunc(funcinclude))
			{
				this.module_func_exec(funcinclude)
				if(newincludes.contains(this.include_dependency["include"]))
					newincludes.removeAt(newincludes.indexof(this.include_dependency["include"]))
			}
			if(module_manager.ismodule(module_manager.Core_format_module_natural(this.include_dependency["include_file"]))) ;Checks if Included file has a Module that is the same as the File name.
			{
				module_manager.reg(this.include_dependency["include_file"])
				if(newincludes.contains(this.include_dependency["include"]))
					newincludes.removeAt(newincludes.indexof(this.include_dependency["include"]))
			}
			module_dependency.endDependentBuild()
		}
		module_manager.initialized:=1
		this.include_dependency:=""
		this.config_set("newincludes","",newincludes)
	}
	regenerateincludesfile()	{
		if(this.hook(A_thisFunc))
			return  this.hook_value(A_thisFunc)
		static locked:=0
		if(!locked)
		{
			locked:=1
			FileDelete, %A_ScriptDir%\generated\Includer_Includes.ahk
			generateddisclaimer:=";This File is Automatically Generated. To Add/Remove files use module_includer functions`n"
			FileAppend, %generateddisclaimer%, %A_ScriptDir%\generated\Includer_Includes.ahk
			types:=this.datastore_get("Include_Types","",this.Default_Include_Types)
			Loop, Parse, types, `,
			{
				this.regenerateincludesfile_type(A_loopfield)
			}
			locked:=0
			module_manager.Core_configmode("reload")
		}
	}
	regenerateincludesfile_type(Type_include)	{
		if(this.hook(A_thisFunc,Type_include))
			return  this.hook_value(A_thisFunc)
		beginningtext:="`n;##Beginning of includes for " Type_include "s"
		FileAppend, %beginningtext%, %A_ScriptDir%\generated\Includer_Includes.ahk
		typefiles:=this.datastore_Get(Type_include,"",Array())
		Loop % typefiles.MaxIndex()
		{
			if(this.isIncludeable(typefiles[A_Index],Type_include))
			{
				texttoinclude:="`n#include *i " this.include_file(typefiles[A_Index],Type_include)
				FileAppend, %texttoinclude% , %A_ScriptDir%\generated\Includer_Includes.ahk
			}
			else
				this.RemoveInclude(typefiles[A_Index],Type_include)
		}
		endingtext:="`n;##Ending of includes for " Type_include "s`n"
		FileAppend, %endingtext%, %A_ScriptDir%\generated\Includer_Includes.ahk
	}
	AddInclude(Name,Type_include)	{
		this.module_checkinit()
		Type_include:=Type_include == "" ? "#root#":Type_include
		if(this.hook(A_thisFunc,Name,Type_include))
			return  this.hook_value(A_thisFunc)
		StringLower, type_include,type_include
		Include_Types:=this.datastore_get("Include_Types","",this.Default_Include_Types)
		if(this.isIncludeable(Name,Type_include))
		{
			if Type_include not in %Include_Types%
			{
				Include_Types.= "," Type_include
				this.config_set("Include_Types","",Include_Types)
			}
			Type_include_List:=this.datastore_Get(Type_include,"",Array())
			if(!Type_include_List.contains(Name))
			{
				Type_include_List.push(Name)
				this.config_set(Type_include,"",Type_include_List)
				newincludes:=this.datastore_get("newincludes","",Array())
				if(!newincludes.contains(type_include "#" Name))
				{
					newincludes.push( type_include "#" Name)
					this.config_set("newincludes","",newincludes)
				}
				this.regenerateincludesfile()
			}
		}
		return this.isIncludeable(Name,Type_include)
	}
	RemoveInclude(Name,Type_include)	{
	this.module_checkinit()
	Type_include:=Type_include == "" ? "#root#":Type_include
		if(this.hook(A_thisFunc,Name,Type_include))
			return  this.hook_value(A_thisFunc)
		Include_Types:=this.datastore_get("Include_Types","",this.Default_Include_Types)
		if Type_include in %Include_Types%
		{
			if(module_dependency.removeDependent("module_includer",type_include "#" Name))
			{
				Type_include_List:=this.datastore_Get(Type_include,"",Array())
				if(Type_include_List.contains(Name))
				{
					Type_include_List.removeAt(Type_include_List.indexof(Name))
					defaulttypes:=this.Default_Include_Types
					if Type_include not in %defaulttypes%
					{
						if(Type_include_List.length() == 0)
						{
							this.config_remove(Type_include)
							Loop, Parse,  Include_Types,`,
								if(A_Loopfield != Type_include)
									out:=out==""?A_Loopfield:out "," A_Loopfield
							this.config_set("Include_Types","",out)
						}
						else
							this.config_set(Type_include,"",Type_include_List)
					}
					else
						this.config_set(Type_include,"",Type_include_List)
					this.regenerateincludesfile()
				}
			}
		}
	}
	isIncludeable(Name,Type_include)	{
		if(this.hook(A_thisFunc,Name,Type_include))
			return  this.hook_value(A_thisFunc)
		return FileExist( this.include_file(Name,Type_include))
	}
	isIncluded(Name,Type_include)	{
		if(this.hook(A_thisFunc,Name,Type_include))
			return  this.hook_value(A_thisFunc)
		Type_include:=Type_include == "" ? "#root#":Type_include
		return this.datastore_Get(Type_include,"",Array()).contains(Name)
	}
	include_file(Name,Type_include){
	this.module_checkinit()
		StringLower, type_include,type_include
		if(Type_include != "" and Type_include != "#root#")
		{
			Type_include:=Format("{:T}", Type_include) "s\"
			FileCreateDir,%A_ScriptDir%\Includes\%Type_include%
		}
		else
			Type_include:=""
		return A_ScriptDir "\Includes\" Type_include Name ".ahk"
	}
	module_configure(GuiInfo:="", SecondaryGuiInfo:="")	{
		if(this.hook(A_thisFunc,GuiInfo,SecondaryGuiInfo))
			return  this.hook_value(A_thisFunc)
		if(isobject(SecondaryGuiInfo))
		{
			type_include:=SecondaryGuiInfo.vDropdownlist1
			if(GuiInfo.GuiAction == "Button1")
			{
				InputBox, newinclude, Add %type_include% Include, What is the file in %type_include%s you would like to include? `n(separate multiple with commas and exclude .ahk)
				if(!Errorlevel)
				{
					StringLower, newinclude,newinclude
					Loop, Parse, newinclude,`,
					{
						newinc=%A_loopfield%
						if(this.isIncludeable(newinc,type_include))
						{
							module_dependency.configuration_lock("module_includer",type_include "#" newinc,1)
							this.addInclude(newinc,type_include)
							Msgbox, %newinc% Added!`nFunctions will not be available until script restarts`n(Script Will Automatically Restart when you exit Configurations)
						}
						else
							Msgbox, Error: Include File not found. Ensure <ScriptDir>/%type_include%s/%newinc%.ahk exists.
					}
				}
			}
			if(GuiInfo.GuiAction == "Button2" and GuiInfo.vDropdownlist1 != "")
			{
				selectedfile:=GuiInfo.vDropdownlist1
				MsgBox, 4, Remove Include, Are you sure you want to remove %selectedfile%?
				ifmsgbox, yes
					this.removeInclude(selectedfile,type_include)
			
			}
			if(GuiInfo.GuiAction == "Button3" or GuiInfo.GuiAction == "GuiClose")
			{
				module_guitemplate.TwoButtonDropdown(A_thisFunc,SecondaryGuiInfo)
				return
			}
			guiinfo.Dropdownlist1:=this.configure_includelist(type_include)
			module_guitemplate.ThreeButtonDropdown(A_thisFunc,guiinfo,SecondaryGuiInfo)
			return
		}
		else if(isobject(GuiInfo))
		{
			if(GuiInfo.GuiAction == "Button2" and GuiInfo.vDropdownlist1 != "")
			{
				filelist:=this.configure_includelist(GuiInfo.vDropdownlist1)
				GInfo:={Windowtitle: "Includer - " GuiInfo.vDropdownlist1, groupbox1: GuiInfo.vDropdownlist1 " Includes", Button1: "Add Include" ,Button2: "Remove Include",Button3: "Done",Dropdownlist1:filelist }
				module_guitemplate.ThreeButtonDropdown(A_thisFunc,GInfo,guiinfo)
				return
			}	
			if(GuiInfo.GuiAction == "Button1" or GuiInfo.GuiAction == "GuiClose")
			{
				module_manager.module_configure()
				return
			}
		}
		typelist:="|"this.datastore_get("Include_Types","",this.Default_Include_Types)
		StringReplace, typelist,typelist,`,,|,All
			GInfo:={Windowtitle: "Configure Includer", groupbox1: "Include Types", Button2: "Configure Include Type",Button1: "Done",Dropdownlist1:typelist }
		module_guitemplate.TwoButtonDropdown(A_thisFunc,GInfo)
	
	
	}
	configure_includelist(type_include)	{
		typefiles:=this.datastore_Get(Type_include,"",Array())
		Loop % typefiles.MaxIndex()
		{
			output.="|" typefiles[A_Index]
		}
		output:=output == ""? "|": output
		return output
	}
	parseInclude(includetext)	{
		if(this.hook(A_thisFunc,includetext))
			return  this.hook_value(A_thisFunc)
		output:=array()
		StringLower, includetext,includetext
		output.include:=includetext
		StringgetPos, pos,includetext,#
		if(ErrorLevel == 0)
		{
			output.include_type:=SubStr(includetext,1,pos)
			pos:=pos+2
			output.include_file:=SubStr(includetext,pos)
		}
		return output
	}
	module_dependency(Directive,DependentName)	{
		file:=this.parseInclude(DependentName)
		if(Directive == "add")
			return this.AddInclude(file.include_file,file.include_type)
		else if(Directive == "remove")
			return this.RemoveInclude(file.include_file,file.include_type)
	}
	check_includer(DependentHandler,DependentName)	{
		if(isobject(this.include_dependency))
		{
			module_dependency.addDependent("module_includer",this.include_dependency["include"],DependentHandler,DependentName)
			rinclude:=this.datastore_get("Reverse","",Array())
			rinclude[this.module_format_naturalize(Format("{:L}", DependentHandler) "#" Format("{:L}", DependentName))]:=this.include_dependency["include"]
			this.config_set("Reverse","",rinclude)
		}
	}
	getIncludedFile(DependentHandler,DependentName,regennewinclude:=0){
		include_dependency:=this.datastore_get("Reverse","",Array())[this.module_format_naturalize(Format("{:L}", DependentHandler) "#" Format("{:L}", DependentName))]
		if(include_dependency == "")
		{
			if(isfunc(DependentName ".core_file"))
				return %DependentName%.core_file()
		}
		else
		{
			include_dependency:=this.parseInclude(include_dependency)
			if(regennewinclude)
			{
				newincludes:=this.datastore_get("newincludes","",Array())
				if(!newincludes.contains(include_dependency.include_type "#" include_dependency.include_file))
				{
					newincludes.push( include_dependency.include_type "#" include_dependency.include_file)
					this.config_set("newincludes","",newincludes)
				}
			}
			return this.include_file(include_dependency.include_file,include_dependency.include_type)
		}
	}
	getIncludedDependency(DependentHandler,DependentName){
			include_dependency:=this.datastore_get("Reverse","",Array())[this.module_format_naturalize(Format("{:L}", DependentHandler) "#" Format("{:L}", DependentName))]
			return this.parseInclude(include_dependency)
	}
	core_file()	{
		return A_LineFile
	}
	DownloadInclude(DownloadURL,Name:="",Type_include:="")	{
		DownloadURL:=this.module_DDLLink(DownloadURL)
		tempfile:=module_manager.datastore_get("Temp","Core_Directory") "\Includer_Download.ahk"
		UrlDownloadToFile, %DownloadURL%, %tempfile%
		if(this.module_scriptfile_check_valid(tempfile))
		{
			fName:=this.module_scriptfile_comment_value(tempfile,"Includer_Name")
			fType_include:=this.module_scriptfile_comment_value(tempfile,"Includer_Type")
			Name:=fName==""?Name:fName
			Type_include:=fType_include==""?Type_include:fType_include
			if(Name != "" and Type_Include != "")
			{
				copylocation:=this.include_file(Name,Type_include)
				FileCopy, %tempfile%, %copylocation% , 1
				this.AddInclude(Name,Type_Include)
			}
		}
		FileDelete, %tempfile%
	}
}
